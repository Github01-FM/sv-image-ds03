From fc9bc53150cb5a4a8ae649da9e527f964d515d32 Mon Sep 17 00:00:00 2001
From: Jingtao Chen <jingtaoc@codeaurora.org>
Date: Mon, 24 Aug 2015 15:25:05 +0800
Subject: [PATCH] APBU-10846 gst-discoverer-1.0 cannot work

1. Add map_mode in default allocator
2. If we set alignment 4095 in hardare decoder, map_mode = TRUE and pagesize alignment
3. larger slice size is required because width is 64 alignment
4. slice_size * 4/3 to guarantee enough memory
5. videos larger than QCIF are supported; not sure about smaller videos

Change-Id: Ifb98787125b441213aa95f6f7c8d2dc8fb446d69
Signed-off-by: Jingtao Chen <jingtaoc@codeaurora.org>
---
 gst/gstallocator.c | 29 +++++++++++++++++++++++++++--
 1 file changed, 27 insertions(+), 2 deletions(-)

diff --git a/gst/gstallocator.c b/gst/gstallocator.c
index c6763e1..2939104 100644
--- a/gst/gstallocator.c
+++ b/gst/gstallocator.c
@@ -41,6 +41,10 @@
 #include "config.h"
 #endif
 
+//#ifdef HAVE_MMAP
+#include "sys/mman.h"
+//#endif
+
 #include "gst_private.h"
 #include "gstmemory.h"
 
@@ -346,6 +350,7 @@ typedef struct
 
   gpointer user_data;
   GDestroyNotify notify;
+  gboolean map_mode;
 } GstMemorySystem;
 
 typedef struct
@@ -375,6 +380,7 @@ _sysmem_init (GstMemorySystem * mem, GstMemoryFlags flags,
   mem->data = data;
   mem->user_data = user_data;
   mem->notify = notify;
+  mem->map_mode = FALSE;
 }
 
 /* create a new memory block that manages the given memory */
@@ -403,6 +409,10 @@ _sysmem_new_block (GstMemoryFlags flags,
   GstMemorySystem *mem;
   gsize aoffset, slice_size, padding;
   guint8 *data;
+  gboolean map_mode = FALSE;
+
+  if (align == 4095)
+      map_mode = TRUE;
 
   /* ensure configured alignment */
   align |= gst_memory_alignment;
@@ -411,7 +421,15 @@ _sysmem_new_block (GstMemoryFlags flags,
   /* alloc header and data in one block */
   slice_size = sizeof (GstMemorySystem) + maxsize;
 
-  mem = g_slice_alloc (slice_size);
+  if (map_mode == TRUE)
+  {
+      mem = mmap (NULL, slice_size * 4 / 3, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_LOCKED|MAP_ANONYMOUS, -1, 0);
+  }
+  else
+  {
+      mem = g_slice_alloc (slice_size);
+  }
+
   if (mem == NULL)
     return NULL;
 
@@ -434,6 +452,8 @@ _sysmem_new_block (GstMemoryFlags flags,
   _sysmem_init (mem, flags, NULL, slice_size, data, maxsize,
       align, offset, size, NULL, NULL);
 
+  mem->map_mode = map_mode;
+
   return mem;
 }
 
@@ -520,6 +540,8 @@ default_free (GstAllocator * allocator, GstMemory * mem)
   GstMemorySystem *dmem = (GstMemorySystem *) mem;
   gsize slice_size;
 
+  gboolean map_mode = dmem->map_mode;
+
   if (dmem->notify)
     dmem->notify (dmem->user_data);
 
@@ -530,7 +552,10 @@ default_free (GstAllocator * allocator, GstMemory * mem)
   memset (mem, 0xff, sizeof (GstMemorySystem));
 #endif
 
-  g_slice_free1 (slice_size, mem);
+  if (map_mode == TRUE)
+      munmap (mem, slice_size * 4 / 3);
+  else
+      g_slice_free1 (slice_size, mem);
 }
 
 static void
-- 
1.9.1

