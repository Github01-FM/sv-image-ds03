From 8638e41ec11d6f25bb66c043a9281b8ff75a248e Mon Sep 17 00:00:00 2001
From: xf02 <xfei@codeaurora.org>
Date: Mon, 13 Apr 2015 11:29:50 +0800
Subject: [PATCH 33/67] APBU-10237: Sometimes,Csrplayer hung up when do seeking
 with some video codecs

Because IMG omx do not implement paused state now, so we can only implement
reset function instead of flush function

Change-Id: I5c6663183d2323ac58bee601bb8abb3c621f2b9c
Signed-off-by: xf02 <xfei@codeaurora.org>
---
 omx/gstomx.c         |  8 +++++---
 omx/gstomxvideodec.c | 56 ++++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 59 insertions(+), 5 deletions(-)

diff --git a/omx/gstomx.c b/omx/gstomx.c
index 1d2c301..eab69bf 100644
--- a/omx/gstomx.c
+++ b/omx/gstomx.c
@@ -1608,9 +1608,11 @@ gst_omx_port_set_flushing (GstOMXPort * port, GstClockTime timeout,
     signalled = TRUE;
     last_error = OMX_ErrorNone;
     gst_omx_component_handle_messages (comp);
-    while (signalled && last_error == OMX_ErrorNone && !port->flushed
-        && port->buffers
-        && port->buffers->len > g_queue_get_length (&port->pending_buffers)) {
+    /* Some times, all buffer will return immediately before it received the
+     * flush completed event. It can continue only after flush completed event
+     * is received or error happend or timeout.
+    */
+    while (signalled && last_error == OMX_ErrorNone && !port->flushed) {
       signalled = gst_omx_component_wait_message (comp, timeout);
       if (signalled)
         gst_omx_component_handle_messages (comp);
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index d7b4cd4..4d417e2 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -104,6 +104,8 @@ static gboolean gst_omx_video_dec_stop (GstVideoDecoder * decoder);
 static gboolean gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
     GstVideoCodecState * state);
 static gboolean gst_omx_video_dec_flush (GstVideoDecoder * decoder);
+static gboolean gst_omx_video_dec_reset (GstVideoDecoder * decoder,
+    gboolean hard);
 static GstFlowReturn gst_omx_video_dec_handle_frame (GstVideoDecoder * decoder,
     GstVideoCodecFrame * frame);
 static GstFlowReturn gst_omx_video_dec_finish (GstVideoDecoder * decoder);
@@ -210,7 +212,8 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
   video_decoder_class->close = GST_DEBUG_FUNCPTR (gst_omx_video_dec_close);
   video_decoder_class->start = GST_DEBUG_FUNCPTR (gst_omx_video_dec_start);
   video_decoder_class->stop = GST_DEBUG_FUNCPTR (gst_omx_video_dec_stop);
-  video_decoder_class->flush = GST_DEBUG_FUNCPTR (gst_omx_video_dec_flush);
+  //video_decoder_class->flush = GST_DEBUG_FUNCPTR (gst_omx_video_dec_flush);
+  video_decoder_class->reset = GST_DEBUG_FUNCPTR (gst_omx_video_dec_reset);
   video_decoder_class->set_format =
       GST_DEBUG_FUNCPTR (gst_omx_video_dec_set_format);
   video_decoder_class->handle_frame =
@@ -2443,7 +2446,7 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
     GST_DEBUG_OBJECT (self, "Need to disable and drain decoder");
 
     gst_omx_video_dec_drain (self, FALSE);
-    gst_omx_video_dec_flush (decoder);
+    //gst_omx_video_dec_flush (decoder);
     gst_omx_port_set_flushing (self->dec_out_port, 5 * GST_SECOND, TRUE);
 
     if (klass->cdata.hacks & GST_OMX_HACK_NO_COMPONENT_RECONFIGURE) {
@@ -2735,6 +2738,55 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
   return TRUE;
 }
 
+/* Because IMG omx do not implement paused state now, so we can only implement
+ * reset function instead of flush function.
+ */
+
+static gboolean
+gst_omx_video_dec_reset (GstVideoDecoder * decoder, gboolean hard)
+{
+  GstOMXVideoDec *self;
+
+  self = GST_OMX_VIDEO_DEC (decoder);
+  if(!hard)
+  {
+    //IMG specific code for treating soft reset differently.
+    GST_DEBUG_OBJECT (self, "Not Resetting decoder for soft reset");
+    return TRUE;
+  }
+
+  /* FIXME: Handle different values of hard */
+
+  GST_DEBUG_OBJECT (self, "Resetting decoder");
+
+  gst_omx_port_set_flushing (self->dec_in_port, 5 * GST_SECOND, TRUE);
+  gst_omx_port_set_flushing (self->dec_out_port, 5 * GST_SECOND, TRUE);
+
+  /* Wait until the srcpad loop is finished,
+   * unlock GST_VIDEO_DECODER_STREAM_LOCK to prevent deadlocks
+   * caused by using this lock from inside the loop function */
+  GST_VIDEO_DECODER_STREAM_UNLOCK (self);
+  GST_PAD_STREAM_LOCK (GST_VIDEO_DECODER_SRC_PAD (self));
+  GST_PAD_STREAM_UNLOCK (GST_VIDEO_DECODER_SRC_PAD (self));
+  GST_VIDEO_DECODER_STREAM_LOCK (self);
+
+  gst_omx_port_set_flushing (self->dec_in_port, 5 * GST_SECOND, FALSE);
+  gst_omx_port_set_flushing (self->dec_out_port, 5 * GST_SECOND, FALSE);
+  gst_omx_port_populate (self->dec_out_port);
+
+  /* Start the srcpad loop again */
+  self->last_upstream_ts = 0;
+  self->eos = FALSE;
+  self->downstream_flow_ret = GST_FLOW_OK;
+
+  gst_pad_start_task (GST_VIDEO_DECODER_SRC_PAD (self),
+      (GstTaskFunction) gst_omx_video_dec_loop, decoder, NULL);
+
+  GST_DEBUG_OBJECT (self, "Reset decoder");
+
+  return TRUE;
+}
+
 static gboolean
 gst_omx_video_dec_flush (GstVideoDecoder * decoder)
 {
-- 
1.9.1

