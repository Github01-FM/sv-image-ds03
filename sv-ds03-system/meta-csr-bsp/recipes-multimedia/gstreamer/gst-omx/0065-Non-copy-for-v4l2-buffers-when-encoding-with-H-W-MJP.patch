From eb162446f531cadd4bdbb41284ecac24ccb68ae2 Mon Sep 17 00:00:00 2001
From: Alan Wang <wbo@codeaurora.org>
Date: Fri, 1 Jul 2016 15:42:27 +0800
Subject: [PATCH 65/67] Non-copy for v4l2 buffers when encoding with H/W MJPEG
 encoder

If encoding with v4l2 buffers(H/W MJPEG encoder), just store actual buf
virtual address(no memcpy). Otherwise using memcpy as usual.

Change-Id: I8f12d37d3b802ce074029f70efadcb39277bc5ab
Signed-off-by: Alan Wang <wbo@codeaurora.org>
---
 omx/gstomxmjpegvideoenc.c  |  3 ---
 omx/gstomxvideoenc.c       | 47 +++++++++++++++++++++++++++++++++++++++-------
 omx/openmax/OMX_IVCommon.h |  3 +--
 3 files changed, 41 insertions(+), 12 deletions(-)

diff --git a/omx/gstomxmjpegvideoenc.c b/omx/gstomxmjpegvideoenc.c
index 653ed67..43c1cb5 100644
--- a/omx/gstomxmjpegvideoenc.c
+++ b/omx/gstomxmjpegvideoenc.c
@@ -164,7 +164,6 @@ gst_omx_mjpeg_video_enc_set_format (GstOMXVideoEnc * enc, GstOMXPort * port,
   // Extract the caps see if it's interleaved content
   GST_OMX_INIT_STRUCT (&config);
   config.bEnable = OMX_FALSE;
-  config.bEncodingFromFileSrc = OMX_FALSE;
 
   codecCaps = state->caps;
   if (codecCaps) {
@@ -180,8 +179,6 @@ gst_omx_mjpeg_video_enc_set_format (GstOMXVideoEnc * enc, GstOMXPort * port,
     if ((interlacemod_string) &&
             g_str_equal(interlacemod_string, "interleaved")) {
       config.bEnable = OMX_TRUE;
-    } else if (interlacemod_string == NULL) {
-      config.bEncodingFromFileSrc = OMX_TRUE;
     }
 
     gst_caps_unref (codecCaps);
diff --git a/omx/gstomxvideoenc.c b/omx/gstomxvideoenc.c
index 4e9310c..11ad63a 100644
--- a/omx/gstomxvideoenc.c
+++ b/omx/gstomxvideoenc.c
@@ -36,6 +36,9 @@ GST_DEBUG_CATEGORY_STATIC (gst_omx_video_enc_debug_category);
 #define GST_CAT_DEFAULT gst_omx_video_enc_debug_category
 
 #define GST_TYPE_OMX_VIDEO_ENC_CONTROL_RATE (gst_omx_video_enc_control_rate_get_type ())
+
+#define GST_V4L2_MEMORY_TYPE "V4l2Memory"
+
 static GType
 gst_omx_video_enc_control_rate_get_type (void)
 {
@@ -1233,9 +1236,15 @@ gst_omx_video_enc_fill_buffer (GstOMXVideoEnc * self, GstBuffer * inbuf,
   GstVideoCodecState *state = gst_video_codec_state_ref (self->input_state);
   GstVideoInfo *info = &state->info;
   OMX_PARAM_PORTDEFINITIONTYPE *port_def = &self->enc_in_port->port_def;
+  GstOMXVideoEncClass *klass = GST_OMX_VIDEO_ENC_GET_CLASS (self);
+
   gboolean ret = FALSE;
+  gboolean enableNativeBuf = FALSE;
   GstVideoFrame frame;
   GstMapInfo map = GST_MAP_INFO_INIT;
+  GstMemory *mem;
+
+  OMX_ERRORTYPE err;
 
   if (info->width != port_def->format.video.nFrameWidth ||
       info->height != port_def->format.video.nFrameHeight) {
@@ -1248,15 +1257,39 @@ gst_omx_video_enc_fill_buffer (GstOMXVideoEnc * self, GstBuffer * inbuf,
       outbuf->omx_buf->nAllocLen - outbuf->omx_buf->nOffset) {
     outbuf->omx_buf->nFilledLen = gst_buffer_get_size (inbuf);
 
-    gst_buffer_extract (inbuf, 0,
-        outbuf->omx_buf->pBuffer + outbuf->omx_buf->nOffset,
-        outbuf->omx_buf->nFilledLen);
+    mem = gst_buffer_peek_memory (inbuf, 0);
+    if (gst_memory_is_type (mem, GST_V4L2_MEMORY_TYPE) &&
+        g_str_equal (klass->cdata.component_name, "OMX.CSR.MJPEG.Encoder")) {
+      OMX_EXT_PARAM_ENABLENATIVEBUFFERTYPE enable_nativeBuffer;
+      GST_OMX_INIT_STRUCT (&enable_nativeBuffer);
+      enable_nativeBuffer.enable = OMX_TRUE;
+      enable_nativeBuffer.nPortIndex = self->enc_in_port->index;
 
-    // Store input buffer's actual virtual address to private field
-    gst_buffer_map (inbuf, &map, GST_MAP_READ);
-    outbuf->omx_buf->pInputPortPrivate = (OMX_PTR)map.data;
+      err =
+          gst_omx_component_set_parameter (self->enc,
+              OMX_IndexImgEnableNativeBuffers,
+              &enable_nativeBuffer);
+      if (err == OMX_ErrorNone) {
+        enableNativeBuf = TRUE;
+      } else {
+        enableNativeBuf = FALSE;
+        GST_ERROR_OBJECT (self, "Failed to set parameter: %s (0x%08x) copy buf",
+            gst_omx_error_to_string (err), err);
+      }
+    }
+
+    if (enableNativeBuf) {
+      // Store input buffer's actual virtual address in private field
+      gst_buffer_map (inbuf, &map, GST_MAP_READ);
+      outbuf->omx_buf->pInputPortPrivate = (OMX_PTR)map.data;
+      gst_buffer_unmap (inbuf, &map);
+    } else {
+      // For other cases use memcpy as usual
+      gst_buffer_extract (inbuf, 0,
+       outbuf->omx_buf->pBuffer + outbuf->omx_buf->nOffset,
+       outbuf->omx_buf->nFilledLen);
+    }
 
-    gst_buffer_unmap (inbuf, &map);
     ret = TRUE;
     goto done;
   }
diff --git a/omx/openmax/OMX_IVCommon.h b/omx/openmax/OMX_IVCommon.h
index 6050c55..d0216e7 100644
--- a/omx/openmax/OMX_IVCommon.h
+++ b/omx/openmax/OMX_IVCommon.h
@@ -602,13 +602,12 @@ typedef struct OMX_CONFIG_AFASSISTANTLIGHTTYPE{
     OMX_AFASSISTANTLIGHTTYPE eAFAssistantLight;
 } OMX_CONFIG_AFASSISTANTLIGHTTYPE;
 
-// CSR Vendor Specific
+// Qualcomm Vendor Specific
 // Enable field BLEND for interleaved content if needed
 typedef struct OMX_CONFIG_FIELDBLEND {
     OMX_U32 nSize;
     OMX_VERSIONTYPE nVersion;
     OMX_BOOL bEnable;
-    OMX_BOOL bEncodingFromFileSrc;
 } OMX_CONFIG_FIELDBLEND;
 
 #define OMX_InterlaceFrameProgressive                   0x00000001
-- 
1.9.1

