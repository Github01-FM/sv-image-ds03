diff -Naur DirectFB-1.7.4/configure.in working/configure.in
--- DirectFB-1.7.4/configure.in	2015-04-08 19:30:38.365217971 +0800
+++ working/configure.in	2015-04-08 18:08:38.205094065 +0800
@@ -2907,6 +2907,7 @@
 gfxdrivers/tdfx/Makefile
 gfxdrivers/unichrome/Makefile
 gfxdrivers/vdpau/Makefile
+gfxdrivers/sirfsoc/Makefile
 gfxdrivers/vmware/Makefile
 
 inputdrivers/Makefile
diff -Naur DirectFB-1.7.4/gfxdrivers/Makefile.am working/gfxdrivers/Makefile.am
--- DirectFB-1.7.4/gfxdrivers/Makefile.am	2013-12-19 08:16:24.000000000 +0800
+++ working/gfxdrivers/Makefile.am	2015-04-08 18:08:38.205094065 +0800
@@ -183,4 +183,5 @@
 	$(TDFX_DIR)	\
 	$(UNICHROME_DIR) \
 	$(VDPAU_DIR)	\
+	sirfsoc \
 	$(VMWARE_DIR)
diff -Naur DirectFB-1.7.4/gfxdrivers/sirfsoc/g2d/g2d.c working/gfxdrivers/sirfsoc/g2d/g2d.c
--- DirectFB-1.7.4/gfxdrivers/sirfsoc/g2d/g2d.c	1970-01-01 08:00:00.000000000 +0800
+++ working/gfxdrivers/sirfsoc/g2d/g2d.c	2015-10-14 13:04:58.614729850 +0800
@@ -0,0 +1,170 @@
+/*
+   Copyright (c) 2011 Cambridge Silicon Radio Limited, a CSR plc group company.
+
+   All rights reserved.
+
+   Written by Jiansong Chen <Jiansong.Chen@csr.com>
+              Nancy Zou <Nancy.Zou@csr.com>
+              Dongli Li <kl16@csr.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with this library; if not, write to the
+   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+*/
+
+#include <sys/ioctl.h>
+#include <sys/fcntl.h>
+#include <unistd.h>
+#include <string.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+#include "g2d_int.h"
+#include "g2d.h"
+
+void g2dSetGlobal(size_t hdr, struct g2d_global *params)
+{
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	ctx->parms.flags = params->flags;
+	ctx->parms.blend_func = params->blend_func;
+	ctx->parms.global_alpha = params->global_alpha;
+	ctx->parms.color_key = params->color_key;
+}
+
+void g2dSetClip(size_t hdr, struct sirf_g2d_rect *rect)
+{
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	if ((rect->left == rect->right) || (rect->top == rect->bottom))
+		return;
+	ctx->parms.num_rects = 1;
+	ctx->parms.rects[0].left = rect->left;
+	ctx->parms.rects[0].top = rect->top;
+	ctx->parms.rects[0].right = rect->right;
+	ctx->parms.rects[0].bottom = rect->bottom;
+}
+
+void g2dSetSrcBuf(size_t hdr, struct g2d_surface *surf)
+{
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	ctx->parms.src.paddr = surf->paddr;
+	ctx->parms.src.bpp = surf->bpp;
+	ctx->parms.src.width = surf->w;
+	ctx->parms.src.height = surf->h;
+	ctx->parms.src.format = surf->fmt;
+}
+
+void g2dSetDstBuf(size_t hdr, struct g2d_surface *surf)
+{
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	ctx->parms.dst.paddr = surf->paddr;
+	ctx->parms.dst.bpp = surf->bpp;
+	ctx->parms.dst.width = surf->w;
+	ctx->parms.dst.height = surf->h;
+	ctx->parms.dst.format = surf->fmt;
+}
+
+void g2dFillRect(size_t hdr, uint32_t color, struct sirf_g2d_rect_wh *rect)
+{
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	ctx->parms.rop3 = 0xF0;
+	ctx->parms.fill_color = color;
+	ctx->parms.flags |= G2D_BLT_COLOR_FILL;
+
+	ctx->parms.dst_rc.x = rect->x;
+	ctx->parms.dst_rc.y = rect->y;
+	ctx->parms.dst_rc.w = rect->w;
+	ctx->parms.dst_rc.h = rect->h;
+	ioctl(ctx->fd, SIRFSOC_G2D_SUBMIT_BITBLD, &ctx->parms);
+}
+
+void g2dBilt(size_t hdr, struct sirf_g2d_rect_wh *src,
+			 struct sirf_g2d_rect_wh *dst)
+{
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	ctx->parms.rop3 = 0xcc;
+
+	ctx->parms.src_rc.x = src->x;
+	ctx->parms.src_rc.y = src->y;
+	ctx->parms.src_rc.w = src->w;
+	ctx->parms.src_rc.h = src->h;
+
+	ctx->parms.dst_rc.x = dst->x;
+	ctx->parms.dst_rc.y = dst->y;
+	ctx->parms.dst_rc.w = dst->w;
+	ctx->parms.dst_rc.h = dst->h;
+	ioctl(ctx->fd, SIRFSOC_G2D_SUBMIT_BITBLD, &ctx->parms);
+}
+
+void g2dFinish(size_t hdr)
+{
+	int wait = 0;
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	ioctl(ctx->fd, SIRFSOC_G2D_WAIT, &wait);
+}
+
+void g2dClear(size_t hdr)
+{
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	memset(&ctx->parms, 0, sizeof(struct sirf_g2d_bltparams));
+}
+
+size_t g2dInit(void)
+{
+	int fd;
+	struct g2d_ctx *ctx = NULL;
+
+	fd = open("/dev/g2d", O_RDWR);
+	if (fd < 0) {
+		printf("failed to open g2d driver\n");
+		goto quit;
+	}
+
+	ctx = malloc(sizeof(*ctx));
+	if (ctx == NULL) {
+		printf(" low mamory!\n");
+		goto quit;
+	}
+
+	memset(ctx, 0, sizeof(*ctx));
+	ctx->fd = fd;
+	return (size_t)ctx;
+
+quit:
+	if (fd >= 0)
+		close(fd);
+	if (ctx != NULL)
+		free(ctx);
+	return 0;
+}
+
+void g2dUninit(size_t hdr)
+{
+	struct g2d_ctx *ctx = (struct g2d_ctx *)hdr;
+
+	if (ctx) {
+		if (ctx->fd >= 0)
+			close(ctx->fd);
+		free(ctx);
+	}
+}
+
diff -Naur DirectFB-1.7.4/gfxdrivers/sirfsoc/g2d/g2d.h working/gfxdrivers/sirfsoc/g2d/g2d.h
--- DirectFB-1.7.4/gfxdrivers/sirfsoc/g2d/g2d.h	1970-01-01 08:00:00.000000000 +0800
+++ working/gfxdrivers/sirfsoc/g2d/g2d.h	2015-10-14 13:04:46.146729747 +0800
@@ -0,0 +1,58 @@
+/*
+   Copyright (c) 2011 Cambridge Silicon Radio Limited, a CSR plc group company.
+
+   All rights reserved.
+
+   Written by Jiansong Chen <Jiansong.Chen@csr.com>
+              Nancy Zou <Nancy.Zou@csr.com>
+              Dongli Li <kl16@csr.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with this library; if not, write to the
+   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+*/
+
+#ifndef __G2D_H__
+#define __G2D_H__
+
+#include "g2d_int.h"
+
+struct g2d_global {
+	uint32_t flags;
+	uint32_t blend_func;
+	uint32_t global_alpha;
+	uint32_t color_key;
+};
+
+struct g2d_surface {
+	uint32_t paddr;
+	uint32_t bpp;
+	uint32_t w;
+	uint32_t h;
+	uint32_t fmt;
+};
+
+void g2dSetGlobal(size_t hdr, struct g2d_global *params);
+void g2dSetClip(size_t hdr, struct sirf_g2d_rect *rect);
+void g2dSetSrcBuf(size_t hdr, struct g2d_surface *surf);
+void g2dSetDstBuf(size_t hdr, struct g2d_surface *surf);
+void g2dFillRect(size_t hdr, uint32_t color, struct sirf_g2d_rect_wh *rect);
+void g2dBilt(size_t hdr, struct sirf_g2d_rect_wh *src,
+			 struct sirf_g2d_rect_wh *dst);
+void g2dFinish(size_t hdr);
+void g2dClear(size_t hdr);
+size_t g2dInit(void);
+void g2dUninit(size_t hdr);
+
+#endif /* __G2D_H__ */
diff -Naur DirectFB-1.7.4/gfxdrivers/sirfsoc/g2d/g2d_int.h working/gfxdrivers/sirfsoc/g2d/g2d_int.h
--- DirectFB-1.7.4/gfxdrivers/sirfsoc/g2d/g2d_int.h	1970-01-01 08:00:00.000000000 +0800
+++ working/gfxdrivers/sirfsoc/g2d/g2d_int.h	2015-10-14 13:04:28.658729604 +0800
@@ -0,0 +1,37 @@
+/*
+   Copyright (c) 2011 Cambridge Silicon Radio Limited, a CSR plc group company.
+
+   All rights reserved.
+
+   Written by Jiansong Chen <Jiansong.Chen@csr.com>
+              Nancy Zou <Nancy.Zou@csr.com>
+	      Dongli Li <Kasin.li@csr.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with this library; if not, write to the
+   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+*/
+
+#ifndef __G2D_INT__
+#define __G2D_INT__
+
+#include "sirfsoc_g2d.h"
+
+#define G2D_BLT_ALPHA_OP_PREMULTIPLIED 1
+typedef struct g2d_ctx {
+    int fd;
+    struct sirf_g2d_bltparams parms;
+};
+
+#endif /* __G2D_INT__ */
diff -Naur DirectFB-1.7.4/gfxdrivers/sirfsoc/g2d/sirfsoc_g2d.h working/gfxdrivers/sirfsoc/g2d/sirfsoc_g2d.h
--- DirectFB-1.7.4/gfxdrivers/sirfsoc/g2d/sirfsoc_g2d.h	1970-01-01 08:00:00.000000000 +0800
+++ working/gfxdrivers/sirfsoc/g2d/sirfsoc_g2d.h	2015-10-14 13:20:40.790737593 +0800
@@ -0,0 +1,140 @@
+/*
+   Copyright (c) 2011 Cambridge Silicon Radio Limited, a CSR plc group company.
+
+   All rights reserved.
+
+   Written by Jiansong Chen <Jiansong.Chen@csr.com>
+              Nancy Zou <Nancy.Zou@csr.com>
+	      Dongli Li <Kasin.li@csr.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with this library; if not, write to the
+   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+*/
+
+#ifndef __G2D_OP_H__
+#define __G2D_OP_H__
+
+#ifdef __KERNEL__
+#include <linux/compiler.h>
+#include <linux/types.h>
+#include <linux/ioctl.h>
+#include <linux/fs.h>       /* file system operations */
+#endif /* _KERNEL_ */
+
+/* disable all additional controls */
+#define G2D_BLT_DISAG2D_ALL		0x00000000
+/* enable transparent blt   */
+#define G2D_BLT_TRANSPARENT_ENABLE	0x00000001
+/* enable standard global alpha */
+#define G2D_BLT_GLOBAL_ALPHA		0x00000002
+/* enable per-pixel alpha bleding */
+#define G2D_BLT_PERPIXEL_ALPHA		0x00000004
+/* apply 90 degree rotation to the blt */
+#define G2D_BLT_ROT_90			0x00000020
+/* apply 180 degree rotation to the blt */
+#define G2D_BLT_ROT_180			0x00000040
+/* apply 270 degree rotation to the blt */
+#define G2D_BLT_ROT_270			0x00000080
+/* apply mirror in horizontal */
+#define G2D_BLT_FLIP_H			0x00000100
+/* apply mirror in vertical     */
+#define G2D_BLT_FLIP_V			0x00000200
+/* Source color Key  enabled    */
+#define G2D_BLT_SRC_COLORKEY		0x00000400
+/* Destination color Key enabled */
+#define G2D_BLT_DST_COLORKEY		0x00000800
+/* color fill enabled */
+#define G2D_BLT_COLOR_FILL		0x00001000
+/* wait blt to complete */
+#define G2D_BLT_WAIT_COMPLETE		0x00100000
+
+/* Memory type */
+#define G2D_MEM_ADDR 0
+#define G2D_MEM_ION  1
+
+#define G2D_RECTS_MAX 4
+
+enum g2d_format {
+	G2D_ARGB8888,
+	G2D_ABGR8888,
+	G2D_RGB565,
+
+	G2D_YUYV,      /* this format is not support yet */
+	G2D_YVYU,      /* this format is not support yet */
+	G2D_UYVY,      /* this format is not support yet */
+	G2D_VYUY,      /* this format is not support yet */
+
+	/* the following format isn't for g2d but vpp. */
+	G2D_EX_I_YUV420 = 0x10000,
+	G2D_EX_I_YUV422,
+	G2D_EX_O_RGBX888,
+	G2D_EX_O_BGRX888,
+	G2D_MAX,
+};
+
+struct sirf_g2d_rect {
+	int32_t left;
+	int32_t top;
+	int32_t right;
+	int32_t bottom;
+};
+
+struct sirf_g2d_rect_wh {
+	int32_t x;
+	int32_t y;
+	int32_t w;
+	int32_t h;
+};
+
+struct sirf_g2d_surface {
+	u_int32_t paddr; /* destination memory */
+	u_int32_t bpp;
+	u_int32_t format; /* dest format */
+	u_int32_t width; /* size of dest surface in pixels */
+	u_int32_t height; /* size of dest surface in pixels */
+};
+
+struct sirf_g2d_bltparams {
+	u_int32_t rop3;	/* rop3 code  */
+	u_int32_t fill_color; /* fill color */
+	u_int32_t color_key;     /* color key in argb8888 fromat */
+	u_int8_t  global_alpha;  /* global alpha blending */
+	u_int8_t  blend_func;    /* per-pixel alpha-blending function */
+	u_int32_t num_rects;
+	struct sirf_g2d_rect rects[G2D_RECTS_MAX];
+				/* clip for build. */
+
+	u_int32_t flags; /* additional blt control information */
+	u_int32_t yuvflags; /* additional flag for yuv */
+
+	struct sirf_g2d_surface src;
+	struct sirf_g2d_rect_wh src_rc; /* rect of src to be selected. */
+	struct sirf_g2d_surface dst;
+	struct sirf_g2d_rect_wh dst_rc;	/* rect of destination for drawing. */
+};
+
+enum {
+	G2D_BITBLT = 0xc,
+	G2D_BITBLT_WAIT,
+};
+
+#define CSR_G2D_OP_BASE 'B'
+
+#define SIRFSOC_G2D_SUBMIT_BITBLD \
+	_IOW(CSR_G2D_OP_BASE, G2D_BITBLT, struct sirf_g2d_bltparams)
+#define SIRFSOC_G2D_WAIT _IOR(CSR_G2D_OP_BASE, G2D_BITBLT_WAIT, int)
+
+#endif /* __G2D_OP_H__ */
+
diff -Naur DirectFB-1.7.4/gfxdrivers/sirfsoc/g2ddev.c working/gfxdrivers/sirfsoc/g2ddev.c
--- DirectFB-1.7.4/gfxdrivers/sirfsoc/g2ddev.c	1970-01-01 08:00:00.000000000 +0800
+++ working/gfxdrivers/sirfsoc/g2ddev.c	2015-10-14 13:05:32.810730131 +0800
@@ -0,0 +1,643 @@
+/*
+   Copyright (c) 2011 Cambridge Silicon Radio Limited, a CSR plc group company.
+
+   All rights reserved.
+
+   Written by Jiansong Chen <Jiansong.Chen@csr.com>
+              Nancy Zou <Nancy.Zou@csr.com>
+              Dongli Li <kl16@csr.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with this library; if not, write to the
+   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+*/
+
+#include <config.h>
+
+#include <dfb_types.h>
+
+#include <stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fbdev/fbdev.h>
+
+#include <sys/mman.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <malloc.h>
+
+#include <directfb.h>
+
+#include <core/coredefs.h>
+#include <core/coretypes.h>
+#include <core/screens.h>
+
+#include <core/state.h>
+#include <core/gfxcard.h>
+#include <core/surface_buffer.h>
+
+#include <gfx/convert.h>
+#include <gfx/util.h>
+#include <misc/conf.h>
+#include <misc/util.h>
+
+#include <core/graphics_driver.h>
+
+DFB_GRAPHICS_DRIVER(g2d)
+
+#include "g2ddev.h"
+#include "g2d/g2d.h"
+#include "g2d/sirfsoc_g2d.h"
+
+D_DEBUG_DOMAIN(g2d, "g2d", "CSR G2D");
+
+
+#define G2D_SUPPORTED_DRAWINGFLAGS (DSDRAW_NOFX)
+#define G2D_SUPPORTED_DRAWINGFUNCTIONS (DFXL_FILLRECTANGLE)
+#define G2D_SUPPORTED_BLITTINGFLAGS \
+    (DSBLIT_BLEND_ALPHACHANNEL |\
+     DSBLIT_BLEND_COLORALPHA | \
+     DSBLIT_SRC_COLORKEY |\
+     DSBLIT_DST_COLORKEY|\
+     DSBLIT_ROTATE90 |\
+     DSBLIT_ROTATE180 |\
+     DSBLIT_ROTATE270 |\
+     DSBLIT_FLIP_HORIZONTAL |\
+     DSBLIT_FLIP_VERTICAL)
+
+#define G2D_SUPPORTED_BLITTINGFUNCTIONS (DFXL_BLIT)
+
+typedef struct {
+    u32 fill_color;
+    struct g2d_global global;
+    struct g2d_surface src;
+    u32 srcpitch;
+    struct g2d_surface dst;
+    u32 dstpitch;
+
+    struct sirf_g2d_rect pri_clip;
+
+    u32 num_rects;
+    DFBRegion clip;
+     /* state validation */
+    int smf_source;
+    int smf_destination;
+    int smf_color;
+    int smf_clip;
+    size_t hdr;
+} G2DDeviceData;
+
+
+static inline void
+g2d_set_destination(G2DDriverData *g2ddrv,
+    G2DDeviceData *g2ddev,
+    CardState *state)
+{
+    if (g2ddev->smf_destination)
+        return;
+
+    g2ddev->dst.paddr =  state->dst.phys;
+    /* 
+     * XXX the bpp information is included in width.
+     */
+    g2ddev->dst.bpp = 1;
+    g2ddev->dst.w = state->dst.pitch;
+    g2ddev->dst.h = state->destination->config.size.h;
+    g2ddev->dstpitch = state->destination->config.size.w;
+    switch (state->destination->config.format) {
+        case DSPF_RGB16:
+            g2ddev->dst.fmt = G2D_RGB565;
+            break;
+        case DSPF_RGB32:
+        case DSPF_ARGB:
+            g2ddev->dst.fmt = G2D_ARGB8888;
+            break;
+        default:
+            D_BUG("unexpected destination pixelformat~");
+    }
+
+    g2ddev->smf_destination = 1;
+}
+
+static inline void
+g2d_set_src(G2DDriverData *g2ddrv,
+    G2DDeviceData *g2ddev,
+    CardState      *state)
+{
+    if (g2ddev->smf_source)
+        return;
+
+    if (state->src.phys) {
+        g2ddev->src.paddr = state->src.phys;
+    }
+    else
+        D_ERROR("NOT vaild addr\n");
+
+    g2ddev->src.w = state->src.pitch;
+    g2ddev->src.h = state->source->config.size.h;
+    g2ddev->src.bpp = 1;
+    g2ddev->srcpitch = state->source->config.size.w;
+    switch (state->source->config.format) {
+        case DSPF_RGB16:
+            g2ddev->src.fmt = G2D_RGB565;
+            break;
+        case DSPF_RGB32:
+        case DSPF_ARGB:
+            g2ddev->src.fmt = G2D_ARGB8888;
+            break;
+        case DSPF_ABGR:
+            g2ddev->src.fmt = G2D_ARGB8888;
+            break;
+        default:
+            D_BUG("unexpected source pixelformat~");
+    }
+    g2ddev->smf_source = 1;
+
+}
+
+static inline void g2d_set_color(G2DDriverData *g2ddrv,
+    G2DDeviceData *g2ddev,
+    CardState        *state)
+{
+    CoreSurfaceBuffer *buffer = state->dst.buffer;
+
+    if (g2ddev->smf_color)
+          return;
+
+    switch (buffer->format) {
+        case DSPF_RGB16:
+            g2ddev->fill_color = PIXEL_RGB16(state->color.r,
+                state->color.g,
+                state->color.b);
+            break;
+        case DSPF_RGB32:
+        case DSPF_ARGB:
+            g2ddev->fill_color = PIXEL_ARGB(state->color.a,
+                state->color.r,
+                state->color.g,
+                state->color.b);
+            break;
+        default:
+            D_ERROR("unexpected dst pixelformat!");
+    }
+
+    g2ddev->smf_color = 1;
+}
+
+static inline void g2d_set_clip(G2DDriverData *g2ddrv,
+    G2DDeviceData *g2ddev,
+    DFBRegion      *clip)
+{
+    if (g2ddev->smf_clip)
+        return;
+
+
+    g2ddev->pri_clip.left = clip->x1;
+    g2ddev->pri_clip.top = clip->y1;
+    g2ddev->pri_clip.right = clip->x2 + 1;
+    g2ddev->pri_clip.bottom = clip->y2 + 1;
+    g2ddev->num_rects = 1;
+
+    g2ddev->smf_clip = 1;
+}
+
+static inline void g2d_set_alpha(G2DDriverData *g2ddrv,
+    G2DDeviceData *g2ddev,
+    CardState        *state)
+{
+    g2ddev->global.global_alpha = 0;
+    g2ddev->global.blend_func = 0;
+    g2ddev->global.flags = 0;
+
+    if (state->blittingflags & DSBLIT_BLEND_ALPHACHANNEL) {
+        if (state->src_blend == DSBF_SRCALPHA)
+            g2ddev->global.blend_func = 0;
+        else if (state->src_blend == DSBF_ONE)
+            g2ddev->global.blend_func = G2D_BLT_ALPHA_OP_PREMULTIPLIED;
+
+        g2ddev->global.flags |= G2D_BLT_PERPIXEL_ALPHA;
+    }
+
+    if (state->blittingflags & DSBLIT_BLEND_COLORALPHA) {
+            g2ddev->global.global_alpha = state->color.a;
+            g2ddev->global.flags |= G2D_BLT_GLOBAL_ALPHA;
+    }
+}
+
+static inline void g2d_set_colorkey(G2DDriverData *g2ddrv,
+    G2DDeviceData *g2ddev,
+    CardState        *state)
+{
+    g2ddev->global.color_key = 0;
+
+    if (state->blittingflags & DSBLIT_SRC_COLORKEY) {
+
+        g2ddev->global.flags |= G2D_BLT_SRC_COLORKEY |
+            G2D_BLT_TRANSPARENT_ENABLE;
+
+        g2ddev->global.color_key = state->src_colorkey;
+    }
+
+    if (state->blittingflags & DSBLIT_DST_COLORKEY) {
+
+        g2ddev->global.flags |= G2D_BLT_DST_COLORKEY |
+            G2D_BLT_TRANSPARENT_ENABLE;
+
+        g2ddev->global.color_key = state->dst_colorkey;
+    }
+
+}
+/*set g2d rotate and flip flags*/
+static inline void g2d_set_rotate(G2DDriverData *g2ddrv,
+								  G2DDeviceData *g2ddev,
+								  CardState   *state)
+{
+   switch(state->blittingflags)
+   	{
+   	case DSBLIT_ROTATE90:
+		  g2ddev->global.flags |=G2D_BLT_ROT_90;
+	          break;
+        case DSBLIT_ROTATE180:
+		  g2ddev->global.flags |=G2D_BLT_ROT_180;
+	          break;
+        case  DSBLIT_ROTATE270: 
+		  g2ddev->global.flags |=G2D_BLT_ROT_270;
+	          break;
+	case DSBLIT_FLIP_HORIZONTAL:
+		  g2ddev->global.flags |=G2D_BLT_FLIP_H;
+		  break;
+	case DSBLIT_FLIP_VERTICAL:
+		  g2ddev->global.flags |=G2D_BLT_FLIP_V;
+		  break;
+	default:
+		  return;
+   	}
+	
+}
+
+/*
+ * Called by gles2SetState() to ensure that the blend functions are properly
+ * set for execution of drawing and blitting functions.  This is part of GLES2
+ * fixed functionality.
+ */
+static inline void
+g2d_set_blend(G2DDriverData *g2ddrv,
+			  G2DDeviceData *g2ddev,
+              CardState       *state)
+{
+	switch (state->src_blend) {
+	case DSBF_SRCALPHA:
+		if (state->dst_blend = DSBF_INVSRCCOLOR) {
+            g2ddev->global.global_alpha = state->color.a;
+            g2ddev->global.flags |= G2D_BLT_GLOBAL_ALPHA;
+			printf("\t\t%s:%d\n", __func__, __LINE__);
+		} else 
+			D_DEBUG_AT(g2d, "unexpected dst blend function %d",
+					state->dst_blend);
+	case DSBF_ZERO:
+	case DSBF_ONE:
+	case DSBF_SRCCOLOR:
+	case DSBF_INVSRCCOLOR:
+	case DSBF_INVSRCALPHA:
+	case DSBF_DESTALPHA:
+	case DSBF_INVDESTALPHA:
+	case DSBF_DESTCOLOR:
+	case DSBF_INVDESTCOLOR:
+	case DSBF_SRCALPHASAT:
+	default:
+		D_DEBUG_AT(g2d, "unexpected dst blend function %d", state->src_blend);
+	}
+
+	switch (state->dst_blend) {
+	case DSBF_INVSRCCOLOR:
+		break;
+	case DSBF_ZERO:
+	case DSBF_ONE:
+	case DSBF_SRCCOLOR:
+	case DSBF_SRCALPHA:
+	case DSBF_INVSRCALPHA:
+	case DSBF_DESTALPHA:
+	case DSBF_INVDESTALPHA:
+	case DSBF_DESTCOLOR:
+	case DSBF_INVDESTCOLOR:
+	case DSBF_SRCALPHASAT:
+	default:
+		D_DEBUG_AT(g2d, "unexpected dst blend function %d", state->dst_blend);
+	}
+}
+
+static void
+g2dCheckState(void *drv, void *dev,
+    CardState *state, DFBAccelerationMask accel)
+{
+    /* Return if the desired function is not supported at all. */
+    if (accel & ~(G2D_SUPPORTED_DRAWINGFUNCTIONS |
+        G2D_SUPPORTED_BLITTINGFUNCTIONS)) {
+        D_DEBUG_AT(g2d, "%x: unsupported function\n", accel);
+        return;
+    }
+
+    /* Return if the destination format is not supported. */
+    switch (state->destination->config.format) {
+        case DSPF_ARGB:
+        case DSPF_RGB32:
+        case DSPF_RGB16:
+            break;
+        default:
+            D_DEBUG_AT(g2d, "%s: unsupported destination format %s\n",
+                __FUNCTION__,
+                dfb_pixelformat_name(state->destination->config.format));
+            return;
+    }
+
+    /* Check if drawing or blitting is requested. */
+    if (DFB_DRAWING_FUNCTION(accel)) {
+        /* Return if unsupported drawing flags are set. */
+        if (state->drawingflags & ~G2D_SUPPORTED_DRAWINGFLAGS) {
+            D_DEBUG_AT(g2d, "%s: unsupported drawing flags 0x%08x\n",
+                __FUNCTION__,
+                state->drawingflags);
+            return;
+        }
+    }
+    else {
+        /* Return if the source format is not supported. */
+        switch (state->source->config.format) {
+            case DSPF_ARGB:
+            case DSPF_ABGR:
+            case DSPF_RGB32:
+            case DSPF_RGB16:
+                break;
+            default:
+                D_DEBUG_AT
+                    (g2d, "%s: unsupported source format %s\n",
+                    __FUNCTION__, dfb_pixelformat_name(state->source->config.format));
+                return;
+        }
+
+        /* Return if unsupported blitting flags are set. */
+        if (state->blittingflags & ~G2D_SUPPORTED_BLITTINGFLAGS) {
+            D_DEBUG_AT(g2d, "%s: unsupported blit flags 0x%08x\n",
+                __FUNCTION__, state->blittingflags);
+                return;
+        }
+
+        if (state->blittingflags & (DSBLIT_BLEND_ALPHACHANNEL |
+                DSBLIT_BLEND_COLORALPHA)) {
+            if (state->dst_blend != DSBF_INVSRCALPHA ||
+                (state->src_blend != DSBF_SRCALPHA &&
+                state->src_blend != DSBF_ONE)) {
+                D_DEBUG_AT(g2d, "%s: unsupported blend functions 0x%02x 0x%02x\n",
+                    __FUNCTION__, state->src_blend, state->dst_blend);
+                    return;
+            }
+
+            if (state->blittingflags & (DSBLIT_SRC_COLORKEY |
+                    DSBLIT_DST_COLORKEY)) {
+                D_DEBUG_AT(g2d, "%s: unsupported blend func with color key\n",
+                    __FUNCTION__);
+                    return;
+            }
+        }
+    }
+
+    /* Enable acceleration of the function. */
+    state->accel |= accel;
+}
+
+static void
+g2dSetState(void *drv, void *dev,
+    GraphicsDeviceFuncs *funcs,
+    CardState *state, DFBAccelerationMask accel)
+{
+    G2DDriverData *g2ddrv = (G2DDriverData *)drv;
+    G2DDeviceData *g2ddev = (G2DDeviceData *)dev;
+
+    if (state->modified & SMF_SOURCE && state->source)
+        g2ddev->smf_source = 0;
+
+    if (state->modified & SMF_DESTINATION)
+        g2ddev->smf_destination = g2ddev->smf_color = 0;
+
+    if (state->modified & SMF_COLOR)
+        g2ddev->smf_color = 0;
+
+    if (state->modified & SMF_CLIP)
+        g2ddev->smf_clip = 0;
+
+    g2d_set_destination(g2ddrv, g2ddev, state);
+
+    switch (accel) {
+        case DFXL_FILLRECTANGLE:
+            g2d_set_color(g2ddrv, g2ddev, state);
+            state->set |= DFXL_FILLRECTANGLE;
+            break;
+        case DFXL_BLIT:
+            g2d_set_src(g2ddrv, g2ddev, state);
+            g2d_set_alpha(g2ddrv, g2ddev, state);
+            g2d_set_colorkey(g2ddrv, g2ddev, state);
+			g2d_set_rotate(g2ddrv, g2ddev, state);
+            state->set |= DFXL_BLIT;
+            break;
+        default:
+            D_ERROR("unexpected drawing/blitting function");
+            break;
+    }
+
+    if (state->modified & SMF_CLIP)
+        g2d_set_clip(g2ddrv, g2ddev, &state->clip);
+
+     state->modified = 0;
+}
+
+static DFBResult
+g2dEngineSync(void *drv, void *dev)
+{
+	D_DEBUG_AT(g2d,"%s\n", __FUNCTION__);
+    G2DDeviceData *g2ddev = (G2DDeviceData *) dev;
+    g2dFinish(g2ddev->hdr);
+    return DFB_OK;
+}
+
+static void
+g2dEngineReset(void *drv, void *dev)
+{
+}
+
+
+static bool g2dFillRectangle(void *drv, void *dev, DFBRectangle *rect)
+{
+    G2DDriverData *g2ddrv = (G2DDriverData *)drv;
+    G2DDeviceData *g2ddev = (G2DDeviceData *)dev;
+    struct g2d_global zglb = {0,};
+    struct sirf_g2d_rect_wh dstrc;
+
+    D_DEBUG_AT(g2d,"%s,color:%x\n", __FUNCTION__, g2ddev->fill_color);
+	if ((g2ddev->fill_color & 0xff000000) == 0)
+		return true;
+
+    dstrc.x = rect->x;
+    dstrc.y = rect->y; 
+    dstrc.w = rect->w; 
+    dstrc.h = rect->h; 
+    g2dClear(g2ddev->hdr);
+    g2dSetGlobal(g2ddev->hdr, &zglb);
+    g2dSetClip(g2ddev->hdr, &g2ddev->pri_clip);
+    g2dSetDstBuf(g2ddev->hdr, &g2ddev->dst);
+    g2dFillRect(g2ddev->hdr, g2ddev->fill_color, &dstrc);
+
+    return true;
+}
+
+static bool g2dDrawLine(void *drv, void *dev, DFBRegion *line)
+{
+    return false;
+}
+
+
+static bool
+g2dBlit(void *drv, void *dev, DFBRectangle *rect, int dx, int dy)
+{
+    G2DDriverData *g2ddrv = (G2DDriverData *)drv;
+    G2DDeviceData *g2ddev = (G2DDeviceData *)dev;
+    struct sirf_g2d_rect_wh dstrc;
+    struct sirf_g2d_rect_wh srcrc;
+
+    D_DEBUG_AT(g2d,"%s\n",__FUNCTION__);
+    srcrc.x = rect->x;
+    srcrc.y = rect->y;
+    srcrc.w = rect->w;
+    srcrc.h = rect->h;
+    dstrc.x = dx;
+    dstrc.y = dy;
+    dstrc.w = rect->w;
+    dstrc.h = rect->h;
+    g2dClear(g2ddev->hdr);
+    g2dSetGlobal(g2ddev->hdr, &g2ddev->global);
+    g2dSetClip(g2ddev->hdr, &g2ddev->pri_clip);
+    g2dSetSrcBuf(g2ddev->hdr, &g2ddev->src);
+    g2dSetDstBuf(g2ddev->hdr, &g2ddev->dst);
+    g2dBilt(g2ddev->hdr, &srcrc, &dstrc);
+
+    return true;
+}
+
+static int
+driver_probe(CoreGraphicsDevice *device)
+{
+    size_t hdr = g2dInit();
+    if (!hdr)
+        return 0;
+    g2dUninit(hdr);
+    return 1;
+}
+
+static void
+driver_get_info(CoreGraphicsDevice *device,
+    GraphicsDriverInfo *info)
+{
+    /* fill driver info structure */
+    snprintf(info->name,
+        DFB_GRAPHICS_DRIVER_INFO_NAME_LENGTH,
+        "g2d driver");
+
+    snprintf(info->vendor,
+        DFB_GRAPHICS_DRIVER_INFO_VENDOR_LENGTH,
+        "csr");
+
+    snprintf(info->url,
+        DFB_GRAPHICS_DRIVER_INFO_URL_LENGTH,
+        "http://www.csr.com");
+
+    snprintf(info->license,
+        DFB_GRAPHICS_DRIVER_INFO_LICENSE_LENGTH,
+        "LGPL");
+
+    info->version.major = 0;
+    info->version.minor = 1;
+
+    info->driver_data_size = sizeof(G2DDriverData);
+    info->device_data_size = sizeof(G2DDeviceData);
+
+}
+
+static DFBResult
+driver_init_driver(CoreGraphicsDevice  *device,
+    GraphicsDeviceFuncs *funcs,
+    void                *driver_data,
+    void                *device_data,
+    CoreDFB             *core)
+{
+    G2DDriverData *g2ddrv = (G2DDriverData*)driver_data;
+
+    g2ddrv->dfb_fbdev = dfb_system_data();
+
+    funcs->CheckState    = g2dCheckState;
+    funcs->SetState      = g2dSetState;
+    funcs->EngineSync    = g2dEngineSync;
+    funcs->EngineReset   = g2dEngineReset;
+    funcs->FillRectangle = g2dFillRectangle;
+    funcs->DrawLine          = g2dDrawLine;
+    funcs->Blit          = g2dBlit;
+    return DFB_OK;
+}
+
+
+static DFBResult
+driver_init_device(CoreGraphicsDevice *device,
+    GraphicsDeviceInfo *device_info,
+    void               *driver_data,
+    void               *device_data)
+{
+    G2DDeviceData *g2ddev = (G2DDeviceData *)device_data;
+    /* fill device info */
+    snprintf(device_info->name,
+        DFB_GRAPHICS_DEVICE_INFO_NAME_LENGTH, "g2d");
+
+    snprintf(device_info->vendor,
+        DFB_GRAPHICS_DEVICE_INFO_VENDOR_LENGTH, "csr");
+
+    device_info->caps.flags = 0;
+ 
+    device_info->caps.accel = G2D_SUPPORTED_DRAWINGFUNCTIONS |
+			G2D_SUPPORTED_BLITTINGFUNCTIONS;
+    device_info->caps.drawing = G2D_SUPPORTED_DRAWINGFLAGS;
+	device_info->caps.blitting = G2D_SUPPORTED_BLITTINGFLAGS;
+    device_info->limits.surface_byteoffset_alignment = 8;
+    device_info->limits.surface_pixelpitch_alignment = 2;
+    g2ddev->hdr = g2dInit();
+    if (g2ddev->hdr)
+		return DFB_OK;
+    return DFB_INIT;
+}
+
+
+static void
+driver_close_device(CoreGraphicsDevice *device,
+    void               *driver_data,
+    void               *device_data)
+{
+    G2DDeviceData *g2ddev = (G2DDeviceData *)device_data;
+    g2dUninit(g2ddev->hdr);
+    g2ddev->hdr = NULL;
+}
+
+static void
+driver_close_driver(CoreGraphicsDevice *device,
+    void               *driver_data)
+{
+    G2DDriverData *g2ddrv = (G2DDriverData*)driver_data;
+    g2ddrv->dfb_fbdev = NULL;
+}
diff -Naur DirectFB-1.7.4/gfxdrivers/sirfsoc/g2ddev.h working/gfxdrivers/sirfsoc/g2ddev.h
--- DirectFB-1.7.4/gfxdrivers/sirfsoc/g2ddev.h	1970-01-01 08:00:00.000000000 +0800
+++ working/gfxdrivers/sirfsoc/g2ddev.h	2015-10-14 13:05:19.430730021 +0800
@@ -0,0 +1,46 @@
+/*
+   Copyright (c) 2011 Cambridge Silicon Radio Limited, a CSR plc group company.
+
+   All rights reserved.
+
+   Written by Jiansong Chen <Jiansong.Chen@csr.com>
+              Nancy Zou <Nancy.Zou@csr.com>
+              Dongli Li <kl16@csr.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with this library; if not, write to the
+   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+*/
+
+
+#ifndef __G2DDRV_H__
+#define __G2DDRV_H__
+#include <dfb_types.h>
+#include <core/coretypes.h>
+#include <core/layers.h>
+
+struct g2d_fill {
+    __u32 dx;
+    __u32 dy;
+    __u32 width;
+    __u32 height;
+    __u32 color;
+};
+
+typedef struct {
+    FBDev  *dfb_fbdev;
+} G2DDriverData;
+
+#endif /*__G2DDEV_H__*/
+
diff -Naur DirectFB-1.7.4/gfxdrivers/sirfsoc/Makefile.am working/gfxdrivers/sirfsoc/Makefile.am
--- DirectFB-1.7.4/gfxdrivers/sirfsoc/Makefile.am	1970-01-01 08:00:00.000000000 +0800
+++ working/gfxdrivers/sirfsoc/Makefile.am	2015-04-08 18:08:38.209094065 +0800
@@ -0,0 +1,34 @@
+## Makefile.am for DirectFB/src/core/gfxcards/ble
+
+INCLUDES = \
+        -I$(top_builddir)/include \
+        -I$(top_builddir)/lib   \
+        -I$(top_srcdir)/include \
+        -I$(top_srcdir)/lib     \
+        -I$(top_srcdir)/src     \
+        -I$(top_srcdir)/systems
+
+bledir = $(MODULEDIR)/gfxdrivers
+ble_LTLIBRARIES = libdirectfb_g2d.la
+
+if BUILD_STATIC
+ble_DATA = $(ble_LTLIBRARIES:.la=.o)
+endif
+
+libdirectfb_g2d_la_SOURCES =   \
+        g2ddev.c  \
+	g2d/g2d.c \
+        g2ddev.h
+
+libdirectfb_g2d_la_LDFLAGS = \
+        -module	                \
+        -avoid-version          \
+        $(DFB_LDFLAGS)
+
+libdirectfb_g2d_la_LIBADD = \
+        $(top_builddir)/lib/direct/libdirect.la \
+        $(top_builddir)/src/libdirectfb.la
+
+
+include $(top_srcdir)/rules/libobject.make
+
