diff -uNrp alsa-lib-1.0.27.1/src/pcm/pcm.c alsa-lib-1.0.27.2/src/pcm/pcm.c
--- alsa-lib-1.0.27.1/src/pcm/pcm.c	2013-07-08 20:31:36.000000000 +0800
+++ alsa-lib-1.0.27.2/src/pcm/pcm.c	2015-06-24 18:45:43.000000000 +0800
@@ -692,6 +692,7 @@ int snd_pcm_close(snd_pcm_t *pcm)
 {
 	int res = 0, err;
 	assert(pcm);
+	printf("alsa: snd_pcm_close pid=%d, pthread_self=%d, *pcm =0x%x\n", getpid(), pthread_self(), *pcm);
 	if (pcm->setup && !pcm->donot_close) {
 		snd_pcm_drop(pcm);
 		err = snd_pcm_hw_free(pcm);
@@ -1247,17 +1248,24 @@ use_default_symbol_version(__snd_pcm_for
  */ 
 snd_pcm_sframes_t snd_pcm_writei(snd_pcm_t *pcm, const void *buffer, snd_pcm_uframes_t size)
 {
+	snd_pcm_sframes_t ret;
 	assert(pcm);
 	assert(size == 0 || buffer);
 	if (CHECK_SANITY(! pcm->setup)) {
 		SNDMSG("PCM not set up");
+		printf("alsa: snd_pcm_writei err pid=%d, PCM not set up\n", getpid());
 		return -EIO;
 	}
 	if (pcm->access != SND_PCM_ACCESS_RW_INTERLEAVED) {
 		SNDMSG("invalid access type %s", snd_pcm_access_name(pcm->access));
+		printf("alsa: snd_pcm_writei err pid=%d, invalid access type\n", getpid());
 		return -EINVAL;
 	}
-	return _snd_pcm_writei(pcm, buffer, size);
+
+	/* printf("alsa: before snd_pcm_writei pid=%d, pcm=%p, buffer=%p, size=%d\n", getpid(), pcm, buffer, size); */
+	ret = _snd_pcm_writei(pcm, buffer, size);
+	/* printf("alsa: after snd_pcm_writei pid=%d, pcm=%p, buffer=%p, size=%d, ret=%d\n", getpid(), pcm, buffer, size,ret); */
+	return ret;
 }
 
 /**
@@ -1279,6 +1287,7 @@ snd_pcm_sframes_t snd_pcm_writei(snd_pcm
  */ 
 snd_pcm_sframes_t snd_pcm_writen(snd_pcm_t *pcm, void **bufs, snd_pcm_uframes_t size)
 {
+	int ret;
 	assert(pcm);
 	assert(size == 0 || bufs);
 	if (CHECK_SANITY(! pcm->setup)) {
@@ -1289,7 +1298,10 @@ snd_pcm_sframes_t snd_pcm_writen(snd_pcm
 		SNDMSG("invalid access type %s", snd_pcm_access_name(pcm->access));
 		return -EINVAL;
 	}
-	return _snd_pcm_writen(pcm, bufs, size);
+	/* printf("alsa: before snd_pcm_writen pid=%d, pcm=%p, buffer=%p, size=%d\n", getpid(), pcm, bufs, size); */
+	ret =  _snd_pcm_writen(pcm, bufs, size);
+	/* printf("alsa: after snd_pcm_writen pid=%d, pcm=%p, buffer=%p, size=%d, ret=%d\n", getpid(), pcm, bufs, size,ret); */
+	return ret;
 }
 
 /**
@@ -2262,11 +2274,16 @@ int snd_pcm_open(snd_pcm_t **pcmp, const
 		 snd_pcm_stream_t stream, int mode)
 {
 	int err;
+
 	assert(pcmp && name);
 	err = snd_config_update();
-	if (err < 0)
+	if (err < 0) {
+		/* printf("alsa: snd_config_update fail pid=%d\n", getpid()); */
 		return err;
-	return snd_pcm_open_noupdate(pcmp, snd_config, name, stream, mode, 0);
+	}
+	err = snd_pcm_open_noupdate(pcmp, snd_config, name, stream, mode, 0);
+	printf("alsa: snd_pcm_open pid=%d, pthread_self=%d,  *pcmp =0x%x, return %d\n", getpid(), pthread_self(), *pcmp, err);
+	return err;
 }
 
 /**
diff -uNrp alsa-lib-1.0.27.1/src/pcm/pcm_rate_linear.c alsa-lib-1.0.27.2/src/pcm/pcm_rate_linear.c
--- alsa-lib-1.0.27.1/src/pcm/pcm_rate_linear.c	2013-07-08 20:31:36.000000000 +0800
+++ alsa-lib-1.0.27.2/src/pcm/pcm_rate_linear.c	2015-05-12 16:46:07.000000000 +0800
@@ -331,6 +331,9 @@ static int linear_init(void *obj, snd_pc
 {
 	struct rate_linear *rate = obj;
 
+	printf("Alsa: info->in.rate = %d, info->out.rate = %d, info->channels = %d, info->in.format = %d\n",
+			info->in.rate, info->out.rate, info->channels, info->in.format);
+
 	rate->get_idx = snd_pcm_linear_get_index(info->in.format, SND_PCM_FORMAT_S16);
 	rate->put_idx = snd_pcm_linear_put_index(SND_PCM_FORMAT_S16, info->out.format);
 	if (info->in.rate < info->out.rate) {
